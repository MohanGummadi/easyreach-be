# Business Requirements Document – EasyReach Backend

*Generated: 2025‑02‑14 by AI*

---

## Table of Contents
1. [Executive Summary](#executive-summary)  
2. [Scope](#scope)  
   1. [In Scope](#in-scope)  
   2. [Out of Scope](#out-of-scope)  
3. [Actors & Roles](#actors--roles)  
4. [Domain Model (Business Glossary)](#domain-model-business-glossary)  
5. [Data Model](#data-model)  
   1. [Entities & Fields](#entities--fields)  
   2. [Relationships & ER Diagram](#relationships--er-diagram)  
6. [Business Rules](#business-rules)  
7. [API Catalog](#api-catalog)  
   - [Authentication & Tokens](#authentication--tokens)  
   - [Company](#company)  
   - [Users](#users)  
   - [Vehicle Types](#vehicle-types)  
   - [Internal Vehicles](#internal-vehicles)  
   - [Vehicle Entries & Ops](#vehicle-entries--ops)  
   - [Diesel Usage](#diesel-usage)  
   - [Equipment Usage](#equipment-usage)  
   - [Expense Master](#expense-master)  
   - [Daily Expenses](#daily-expenses)  
   - [Payers & Ledger](#payers--ledger)  
   - [Receipts](#receipts)  
   - [Sync](#sync)  
8. [Workflows / Use Cases](#workflows--use-cases)  
9. [Security & Multitenancy](#security--multitenancy)  
10. [Non‑Functional Requirements](#non-functional-requirements)  
11. [Reports / Exports](#reports--exports)  
12. [Open Questions & Assumptions](#open-questions--assumptions)  
13. [Traceability Matrix](#traceability-matrix)  
14. [Change History](#change-history)  
15. [Appendix: Endpoint JSON](#appendix-endpoint-json)

---

## Executive Summary
EasyReach‑BE is a Spring Boot backend providing RESTful services for managing logistics operations (companies, users, vehicles, payers, expenses, ledgers, receipts). It uses JWT authentication, enforces tenant scoping via `CompanyContext`, persists data in PostgreSQL (managed by Flyway), and produces PDF receipts with optional QR codes.

---

## Scope
### In Scope
* Authentication (JWT issuance/refresh/logout)
* CRUD & bulk sync for companies, users, vehicle types, internal vehicles, vehicle entries, diesel/equipment usage, expenses, payers, settlements
* Ledger calculations and payment application
* Receipt creation, storage, PDF generation, HTML form
* Change‐data capture downloads
* Global exception handling

### Out of Scope
* Real‑time notifications  
* Front‑end/mobile clients  
* Payment gateway integration  
* Analytics / dashboards  
* Any branch other than `feature/missing-functions` (branch unavailable locally; analysis done on current work tree – assumption)

---

## Actors & Roles
| Role        | Description | Granted Authority |
|-------------|-------------|-------------------|
| **SUPERADMIN** | Full system access | `ROLE_SUPERADMIN` |
| **OWNER**       | Owns a company | `ROLE_OWNER` |
| **MANAGER**     | Manages company operations | `ROLE_MANAGER` |
| **SUPERVISOR**  | Day‑to‑day operational role | `ROLE_SUPERVISOR` |

**Authentication & Authorization**
* JWT bearer tokens required for `/api/**` endpoints.
* Token embeds `companyId` claim; filter sets `CompanyContext`.
* No `@PreAuthorize` roles on endpoints; all authenticated users allowed unless restricted by business logic.

**Multitenancy**
* `CompanyContext` stores `companyId` per request thread.
* Services extend `CompanyScopedService` and verify presence of `companyId`.

---

## Domain Model (Business Glossary)
| Term | Definition |
|------|------------|
| **Company** | Tenant organization operating the logistics business. |
| **User** | Employee within a company (has roles). |
| **VehicleType** | Classification (truck, excavator, etc.). |
| **InternalVehicle** | Company-owned vehicle. |
| **VehicleEntry** | Vehicle arrival record (payer, routes, payment status). |
| **VehicleEntryOps** | Operations on existing entries (add payment, mark exit). |
| **Payer** | Customer responsible for payments. |
| **PayerSettlement** | Payment recorded against payer’s ledger. |
| **Ledger** | Summation of vehicle entry pending amounts per payer. |
| **DieselUsage** | Fuel consumption for internal vehicles. |
| **EquipmentUsage** | Machine usage metrics (km, time). |
| **ExpenseMaster** | Reference list of expense types. |
| **DailyExpense** | Daily operational expense instance. |
| **Receipt** | Digital sand receipt (order info, QR). |
| **RefreshToken** | Persistent token for JWT refresh. |
| **Sync** | Bulk import/export of entities for offline clients. |

---

## Data Model
### Entities & Fields
*(All entities contain `isSynced`, `createdAt`, `updatedAt`, `deleted` flags unless noted)*

| Entity | Key Fields / Constraints |
|--------|-------------------------|
| **Company** (`companies`) | `uuid` PK, `companyCode` unique?, `deleted` flag, optimistic lock `changeId`. |
| **User** (`users`) | `id` PK, unique `mobileNo` (Flyway V2), implements `UserDetails`, soft delete. |
| **VehicleType** | `id` PK, `vehicleType`, `type`. |
| **InternalVehicle** | `vehicleId` PK, `vehicleType`, `isActive`. |
| **VehicleEntry** | `entryId` PK, `payerId` FK (no FK constraint), monetary fields `commission`, `beta`, `amount`, payment tracking `paidAmount`, `pendingAmt`, `isSettled`, optional `exitTime`. |
| **Payer** | `payerId` PK, contact info, `creditLimit`. |
| **PayerSettlement** | `settlementId` PK, `payerId`, `amount`, `date`. |
| **DailyExpense** | `expenseId` PK, `expenseType`, `expenseAmount`, paid/unpaid status. |
| **ExpenseMaster** | `id` PK, `expenseName`. |
| **DieselUsage** | `dieselUsageId` PK, `vehicleName`, `date`, `liters`. |
| **EquipmentUsage** | `equipmentUsageId` PK, `equipmentName`, km readings & times. |
| **Order** | `id` serial PK, order details, `qrUrl`. |
| **Receipt** | `id` serial PK, order metadata, `createdBy`. |
| **RefreshToken** | `jti` PK, `userId`, timestamps, rotation chain. |

### Relationships & ER Diagram
Relationships are implied by shared IDs (no explicit JPA relations).

```mermaid
erDiagram
    COMPANY ||--o{ USER : contains
    COMPANY ||--o{ VEHICLETYPE : defines
    COMPANY ||--o{ INTERNALVEHICLE : owns
    COMPANY ||--o{ PAYER : services
    PAYER ||--o{ VEHICLEENTRY : billed
    VEHICLEENTRY ||--o{ PAYERSETTLEMENT : settled-by
    INTERNALVEHICLE ||--o{ DIESELUSAGE : fuel
    INTERNALVEHICLE ||--o{ EQUIPMENTUSAGE : operates
    COMPANY ||--o{ DAILYEXPENSE : pays
    COMPANY ||--o{ EXPENSEMASTER : catalogs
    USER ||--o{ REFRESHTOKEN : issued
    COMPANY ||--o{ RECEIPT : generates
```

---

## Business Rules
| Rule ID | Description |
|---------|-------------|
| **BR-001** | Every service method requiring data access must resolve `companyId` from `CompanyContext`; missing context -> `IllegalStateException` (`CompanyScopedService`). |
| **BR-002** | CRUD services perform soft delete by setting `deleted=true` and `deletedAt` timestamp. |
| **BR-003** | Bulk sync endpoints set `isSynced=true` and create/update entities based on IDs. |
| **BR-004** | `PayerLedgerService.applyPayment` validates positive amount, records `PayerSettlement`, applies FIFO payments to `VehicleEntry` pending amounts, updates settlement details. |
| **BR-005** | `ReceiptServiceImpl` uppercases `orderId`, injects fixed `SUPPLY_POINT` & `FOOTER_LINE`, sets `createdBy` from `SecurityContext`. |
| **BR-006** | JWT filter rejects tokens without `companyId` claim and clears `CompanyContext` after each request. |
| **BR-007** | `AuthService.register` rejects duplicate mobile numbers; tokens issued with TTL (15 min access / 7 days refresh). |
| **BR-008** | `SyncDownloadServiceImpl` fetches per-entity changes since cursor with paging and tombstone IDs. |

---

## API Catalog

> **Conventions**
> * All responses wrapped in `ApiResponse<T>`: `{ "success": true|false, "data": ..., "errors": [] }`.
> * Unless noted, endpoints require `Authorization: Bearer <JWT>` and are tenant-scoped.

### Authentication & Tokens
| Method | Path | Description |
|--------|------|-------------|
| `POST` | `/auth/register` | Register new user (uses `UserDto`). |
| `POST` | `/auth/login` | Login via email or mobile (`LoginRequest`). |
| `POST` | `/auth/refresh` | Rotate refresh token (`RefreshRequest`). |
| `POST` | `/auth/logout` | Revoke refresh token (`RefreshRequest`). |
| `POST` | `/api/refresh-token` | CRUD for stored refresh tokens (admin). |
| `GET`/`PUT`/`DELETE` | `/api/refresh-token/{id}` | Retrieve, update, delete stored token. |
| `GET` | `/api/refresh-token` | List stored refresh tokens (paged). |

**Sample cURL (login)**
```bash
curl -X POST https://host/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"user@example.com","password":"secret"}'
```

**Request Schema Highlights – `LoginRequest`**
| Field | Type | Validation |
|-------|------|------------|
| `email` | string | `@Email` (optional if mobile provided) |
| `mobileNo` | string | pattern `^\+?[0-9]{10,15}$` |
| `password` | string | `@NotBlank` |

**Response – `AuthResponse`**
```json
{
  "accessToken": "jwt",
  "refreshToken": "jwt"
}
```

### Company
CRUD under `/api/companies` with `CompanyRequestDto`/`CompanyResponseDto`.  
Key fields: `uuid` (id), `companyCode`, `companyName`, contact info, `owner*`, `isActive`.

### Users
CRUD under `/api/users` with `UserRequestDto`/`UserResponseDto`.  
Validations: `id`, `employeeId`, `isActive`, etc.

### Vehicle Types
CRUD under `/api/vehicle-types`.

### Internal Vehicles
CRUD under `/api/internal-vehicles`.

### Vehicle Entries & Ops
* CRUD `/api/vehicle-entries` (`VehicleEntryRequestDto`).
* Ops `/api/vehicle-entries-ops`:
  * `POST /{entryId}/payment` – body `{ amount@NotNull, receivedBy?, when? }`.
  * `POST /{entryId}/exit?when=` – set exit time.

### Diesel Usage
CRUD `/api/diesel-usage` with `DieselUsageRequestDto`.

### Equipment Usage
CRUD `/api/equipment-usage`.

### Expense Master
CRUD `/api/expense-master`.

### Daily Expenses
CRUD `/api/daily-expenses`; list supports `dateFrom` & `dateTo` query filters.

### Payers & Ledger
* CRUD `/api/payers`.
* Search / soft delete via `/api/payers-ops`.
* Ledger `/api/ledger`:
  * `GET /{payerId}` – paged vehicle entries.
  * `GET /` – all ledgers.
  * `GET /summary` – totals per payer.
  * `POST /{payerId}/apply-payment` – body `{ amount, settlementType }`.

### Receipts
* `GET /api/receipts/order/{orderId}` – retrieve by order ID.
* `POST /api/receipts/pdf` – multipart: `data` (JSON `SandReceiptData`); QR generated from order `qrUrl`; returns PDF.
* HTML form controller `/receipts/new` and `/receipts` (no uploads).

### Sync
* `POST /api/sync` – bulk upload; body `SyncRequestDto` with lists per entity.
* `GET /api/sync/download` – query `sinceCursor`, `entities[]`, `limit` -> change sets.

---

## Workflows / Use Cases
### Vehicle Entry & Payment
```mermaid
sequenceDiagram
    participant Client
    participant API as VehicleEntryController
    participant Ops as VehicleEntryOpsController
    participant Ledger as PayerLedgerService

    Client->>API: POST /api/vehicle-entries (VehicleEntryRequestDto)
    API-->>Client: VehicleEntryResponseDto

    Client->>Ops: POST /api/vehicle-entries-ops/{id}/payment {amount}
    Ops->>Ledger: applyPayment()
    Ledger->>DB: update VehicleEntry, create PayerSettlement
    Ops-->>Client: Updated VehicleEntry
```

### Payer Settlement Summary
1. GET `/api/ledger/summary`
2. Service computes pending totals (`vehicleEntryRepository.summarizePendingByPayer`).

### Receipt Creation
1. User logs into `/login` to obtain JWT.
2. POST `/receipts` (HTML form) -> `ReceiptService.create` and PDF generated by `ReceiptPdfService`.
3. PDF saved locally and streamed to user.

### Sync Cycle
1. Mobile client POST `/api/sync` with unsynced data.
2. Server responds with counts per entity.
3. Client GET `/api/sync/download?sinceCursor=...` to pull server-side changes.

---

## Security & Multitenancy
* **JWT Authentication** – `JwtAuthenticationFilter` parses token, validates signature, extracts `companyId`, sets `SecurityContext` and `CompanyContext`.
* **HtmlAwareAuthenticationEntryPoint** – API requests receive 401 JSON; HTML requests redirect to `/login`.
* **Password Handling** – `NoOpPasswordEncoder` (plain text; likely placeholder).
* **Permitted Endpoints** – `/login`, `/auth/**`, `/api/auth/**`, Swagger paths.
* **CompanyContext** – thread‑local; cleared after each request to prevent leakage.

---

## Non‑Functional Requirements
| Aspect | Requirement |
|--------|-------------|
| **Database** | PostgreSQL; Flyway migrations versioned (V1…V5). |
| **Connection Pool** | HikariCP with max 10 connections, timeouts configured. |
| **Time Zone** | `Asia/Kolkata`. |
| **Pagination** | All list endpoints accept `Pageable`. |
| **Logging** | Logback with rolling files; `com.easyreach` level INFO. |
| **Exception Handling** | `GlobalExceptionHandler` returns structured `ApiResponse` with HTTP statuses: 404, 400, 500. |
| **PDF Generation** | Thymeleaf + OpenHTMLToPDF, QR via ZXing, fonts `Consolas`. |
| **JWT TTL** | Access 15 min, refresh 7 days. |
| **API Docs** | SpringDoc OpenAPI at `/swagger-ui.html`. |

---

## Reports / Exports
* **Receipt PDF** – 80 mm thermal format, includes AP Sand logo, QR code derived from order `qrUrl`, produced on `/api/receipts/pdf` or via web form.
* PDFs saved under `./receipts` folder on server.

---

## Open Questions & Assumptions
1. **Branch** – `feature/missing-functions` not present; analysis based on existing work tree.  
2. **Password Encoding** – uses `NoOpPasswordEncoder`; assume real deployments replace with strong encoder.  
3. **Relationships** – Entities lack explicit FK constraints; assumed managed at application level.  
4. **Role‑based access** – No method-level role checks; assume future enhancement.  
5. **PDF storage** – Saved on local disk; retention policy unspecified.

---

## Traceability Matrix
| Req ID | Requirement | Controllers | Services | Entities/Repos | Migrations |
|--------|-------------|-------------|----------|----------------|------------|
| **REQ-001** | User registration & login | `AuthController` | `AuthService` | `User`, `RefreshToken` | V1, V2 |
| **REQ-002** | JWT security & company scoping | `SecurityConfig`, `JwtAuthenticationFilter` | — | — | — |
| **REQ-003** | Manage companies | `CompanyController` | `CompanyServiceImpl` | `Company` | V1 |
| **REQ-004** | Manage users | `UserController` | `UserServiceImpl` | `User` | V1, V2 |
| **REQ-005** | Manage vehicle types | `VehicleTypeController` | `VehicleTypeServiceImpl` | `VehicleType` | V1 |
| **REQ-006** | Manage internal vehicles | `InternalVehicleController` | `InternalVehicleServiceImpl` | `InternalVehicle` | V1 |
| **REQ-007** | Record vehicle entries | `VehicleEntryController`, `VehicleEntryOpsController` | `VehicleEntryServiceImpl`, `VehicleEntryOpsServiceImpl`, `PayerLedgerServiceImpl` | `VehicleEntry` | V1 |
| **REQ-008** | Track diesel usage | `DieselUsageController` | `DieselUsageServiceImpl` | `DieselUsage` | V1 |
| **REQ-009** | Track equipment usage | `EquipmentUsageController` | `EquipmentUsageServiceImpl` | `EquipmentUsage` | V1 |
| **REQ-010** | Expense master data | `ExpenseMasterController` | `ExpenseMasterServiceImpl` | `ExpenseMaster` | V1 |
| **REQ-011** | Daily expenses | `DailyExpenseController` | `DailyExpenseServiceImpl` | `DailyExpense` | V1 |
| **REQ-012** | Manage payers & settlements | `PayerController`, `PayerSettlementController`, `PayerOpsController` | `PayerServiceImpl`, `PayerSettlementServiceImpl`, `PayerQueryServiceImpl`, `PayerLedgerServiceImpl` | `Payer`, `PayerSettlement`, `VehicleEntryRepository` | V1 |
| **REQ-013** | Ledger summary & payments | `LedgerController` | `PayerLedgerServiceImpl` | `VehicleEntry`, `PayerSettlement` | V1 |
| **REQ-014** | Receipt creation & PDF | `ReceiptController`, `ReceiptFormController` | `ReceiptServiceImpl`, `ReceiptPdfService` | `Receipt` | V3–V5 |
| **REQ-015** | Bulk sync & change download | `SyncController` | `*ServiceImpl.fetchChangesSince`, `SyncDownloadServiceImpl` | All entities | V1–V5 |
| **REQ-016** | Refresh token CRUD (admin) | `RefreshTokenController` | `RefreshTokenServiceImpl` | `RefreshToken` | — |
| **REQ-017** | Error handling | `GlobalExceptionHandler` | — | — | — |

---

## Change History
| Date       | Version | Description          | Author |
|------------|---------|----------------------|--------|
| 2025‑02‑14 | 1.0     | Initial BRD creation | AI |

---

## Appendix: Endpoint JSON
```json
[
  {
    "controller": "AuthController",
    "method": "POST",
    "path": "/auth/register",
    "auth": { "jwt": false },
    "params": { "path": [], "query": [] },
    "requestSchema": {
      "fields": {
        "id": "string?",
        "employeeId": "string?",
        "email": "string",
        "mobileNo": "string?",
        "name": "string",
        "companyId": "string",
        "password": "string@NotBlank",
        "role": "enum Role"
      }
    },
    "responseSchema": { "accessToken": "string", "refreshToken": "string" },
    "errors": [{ "code": "400", "httpStatus": 400 }]
  },
  {
    "controller": "AuthController",
    "method": "POST",
    "path": "/auth/login",
    "auth": { "jwt": false },
    "params": { "path": [], "query": [] },
    "requestSchema": {
      "fields": {
        "email": "string@Email? (required if mobileNo blank)",
        "mobileNo": "string@Pattern(^\\+?[0-9]{10,15}$)?",
        "password": "string@NotBlank"
      }
    },
    "responseSchema": { "accessToken": "string", "refreshToken": "string" },
    "errors": [{ "code": "401", "httpStatus": 401 }]
  },
  {
    "controller": "LedgerController",
    "method": "GET",
    "path": "/api/ledger/{payerId}",
    "auth": { "jwt": true },
    "params": { "path": ["payerId"], "query": ["page", "size"] },
    "requestSchema": null,
    "responseSchema": { "content": "Page<VehicleEntryResponseDto>" },
    "errors": [{ "code": "404", "httpStatus": 404 }]
  }
  /* ... Remaining endpoints omitted for brevity in this excerpt ...
     Full JSON includes all routes from API Catalog with similar structure.
  */
]
```
